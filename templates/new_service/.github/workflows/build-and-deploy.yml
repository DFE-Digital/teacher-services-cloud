name: Build and Deploy
concurrency: build_and_deploy_${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy environment"
        required: true
        type: choice
        default: review
        options:
        - review
        - development
        - production
      docker-image-tag:
        description: "Docker image tag to deploy (optional)"
        required: true
        type: string
      pull-request-number:
        description: "Pull request number (required for review environment)"
        required: false
        type: string
  push:
   branches:
    - main
  pull_request:
    branches:
    - main
    types: [opened, reopened, synchronize, labeled]

env:
  TERRAFORM_BASE: terraform/application
  HEALTHCHECK_CMD: 'healthcheck/all'

jobs:
  build:
    name: Build
    if: ${{ github.event_name != 'workflow_dispatch' }}
    env:
      DOCKER_REPOSITORY: #DOCKER_REPOSITORY#
    outputs:
      docker-image-tag: ${{ steps.build-image.outputs.tag }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      name: Checkout

    - name: Build and push docker image
      id: build-image
      uses: DFE-Digital/github-actions/build-docker-image@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        context: .
        docker-repository: ${{ env.DOCKER_REPOSITORY }}
        max-cache: true
        reuse-cache: true
        snyk-token: ${{ secrets.SNYK_TOKEN }}

  test:
    name: Run tests
    if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    # This is a skeleton test job
    # It will need to be updated to set the environment and run required tests
    # The steps can be moved to a separate action if preferred

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    # - name: Run tests
    #   shell: bash
    #   run: |
    #     run some tests

  deploy-review-app:
    name: Deployment To Review
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    needs: [build]
    environment:
      name: review
      url: ${{ steps.deploy_review.outputs.environment_url }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: write

    steps:
    - name: Deploy App to Review
      id: deploy_review
      uses: DFE-Digital/github-actions/deploy-to-aks@master
      with:
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        environment: review
        pr-number: ${{ github.event.pull_request.number }}
        sha: ${{ needs.build.outputs.docker-image-tag }}
        terraform-base: ${{ env.TERRAFORM_BASE }}
        healthcheck: ${{ env.HEALTHCHECK_CMD }}
        db-seed: true
        smoke-test: true
#        gcp-wip: ${{ vars.GCP_WIP }}
#        gcp-project-id: ${{ vars.GCP_PROJECT_ID }}

  deploy:
    name: Deploy environments
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy_app.outputs.environment_url }}
    needs: [build, test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: write
    strategy:
      max-parallel: 1
      matrix:
        environment: [development,production]

    steps:
    - uses: azure/login@v2
      with:
        client-id:  ${{ secrets.AZURE_CLIENT_ID  }}
        tenant-id:  ${{ secrets.AZURE_TENANT_ID   }}
        subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID   }}

    - name: Fetch secrets from key vault
      uses: azure/CLI@v2
      id: keyvault-secret
      with:
        inlineScript: |
          SLACK_WEBHOOK=$(az keyvault secret show --name "SLACK-WEBHOOK" --vault-name "${{ secrets.INF_KEY_VAULT }}" --query "value" -o tsv)
          echo "::add-mask::$SLACK_WEBHOOK"
          echo "SLACK_WEBHOOK=$SLACK_WEBHOOK" >> $GITHUB_OUTPUT

    - name: Deploy app to ${{ matrix.environment }}
      id: deploy_app
      uses: DFE-Digital/github-actions/deploy-to-aks@master
      with:
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        environment: ${{ matrix.environment }}
        pr-number: ${{ github.event.pull_request.number }}
        sha: ${{ needs.build.outputs.docker-image-tag }}
        terraform-base: ${{ env.TERRAFORM_BASE }}
        healthcheck: ${{ env.HEALTHCHECK_CMD }}
        slack-webhook: ${{ steps.keyvault-secret.outputs.SLACK_WEBHOOK }}
        smoke-test: true
#        gcp-wip: ${{ vars.GCP_WIP }}
#        gcp-project-id: ${{ vars.GCP_PROJECT_ID }}

  manual_deploy:
    name: Manual deploy
    if: ${{ github.event_name == 'workflow_dispatch' }}
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy_manual.outputs.environment_url }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: write

    steps:
    - uses: azure/login@v2
      with:
        client-id:  ${{ secrets.AZURE_CLIENT_ID  }}
        tenant-id:  ${{ secrets.AZURE_TENANT_ID   }}
        subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID   }}

    - name: Fetch secrets from key vault
      uses: azure/CLI@v2
      id: keyvault-secret
      with:
        inlineScript: |
          SLACK_WEBHOOK=$(az keyvault secret show --name "SLACK-WEBHOOK" --vault-name "${{ secrets.INF_KEY_VAULT }}" --query "value" -o tsv)
          echo "::add-mask::$SLACK_WEBHOOK"
          echo "SLACK_WEBHOOK=$SLACK_WEBHOOK" >> $GITHUB_OUTPUT

    - name: Deploy app to ${{ inputs.environment }}
      id: deploy_manual
      uses: DFE-Digital/github-actions/deploy-to-aks@master
      with:
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        environment: ${{ inputs.environment }}
        pr-number: ${{ inputs.pull-request-number }}
        sha: ${{ inputs.docker-image-tag }}
        terraform-base: ${{ env.TERRAFORM_BASE }}
        healthcheck: ${{ env.HEALTHCHECK_CMD }}
        slack-webhook: ${{ steps.keyvault-secret.outputs.SLACK_WEBHOOK }}
        smoke-test: true
        db-seed: ${{ inputs.environment == 'review' && 'true' || 'false' }}
#        gcp-wip: ${{ vars.GCP_WIP }}
#        gcp-project-id: ${{ vars.GCP_PROJECT_ID }}

  deploy_domains_infra:
    name: Deploy Domains Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_production
    needs: [deploy]
    environment:
      name: production
    permissions:
      id-token: write

    steps:
      - uses: azure/login@v2
        with:
          client-id:  ${{ secrets.AZURE_CLIENT_ID  }}
          tenant-id:  ${{ secrets.AZURE_TENANT_ID   }}
          subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID   }}

      - name: Fetch secrets from key vault
        uses: azure/CLI@v2
        id: keyvault-secret
        with:
          inlineScript: |
            SLACK_WEBHOOK=$(az keyvault secret show --name "SLACK-WEBHOOK" --vault-name "${{ secrets.INF_KEY_VAULT }}" --query "value" -o tsv)
            echo "::add-mask::$SLACK_WEBHOOK"
            echo "SLACK_WEBHOOK=$SLACK_WEBHOOK" >> $GITHUB_OUTPUT

      - name: Deploy Domains Infrastructure
        id: deploy_domains_infra
        uses: DFE-Digital/github-actions/deploy-domains-infra@master
        with:
          azure-client-id:  ${{ secrets.AZURE_CLIENT_ID  }}
          azure-tenant-id:  ${{ secrets.AZURE_TENANT_ID   }}
          azure-subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID   }}
          slack-webhook: ${{ steps.keyvault-secret.outputs.SLACK_WEBHOOK }}

  deploy_domains_env:
    name: Deploy Domains to ${{ matrix.domain_environment }} environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_${{ matrix.domain_environment }}
    needs: [deploy_domains_infra]
    strategy:
      max-parallel: 1
      matrix:
        domain_environment: [development, production]
    environment:
      name: production
    permissions:
      id-token: write

    steps:
      - uses: azure/login@v2
        with:
          client-id:  ${{ secrets.AZURE_CLIENT_ID  }}
          tenant-id:  ${{ secrets.AZURE_TENANT_ID   }}
          subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID   }}

      - name: Fetch secrets from key vault
        uses: azure/CLI@v2
        id: keyvault-secret
        with:
          inlineScript: |
            SLACK_WEBHOOK=$(az keyvault secret show --name "SLACK-WEBHOOK" --vault-name "${{ secrets.INF_KEY_VAULT }}" --query "value" -o tsv)
            echo "::add-mask::$SLACK_WEBHOOK"
            echo "SLACK_WEBHOOK=$SLACK_WEBHOOK" >> $GITHUB_OUTPUT

      - name: Deploy Domains Environment
        id: deploy_domains_env
        uses: DFE-Digital/github-actions/deploy-domains-env@master
        with:
          azure-client-id:  ${{ secrets.AZURE_CLIENT_ID  }}
          azure-tenant-id:  ${{ secrets.AZURE_TENANT_ID   }}
          azure-subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID   }}
          environment: ${{ matrix.domain_environment }}
          healthcheck: healthcheck/all
          slack-webhook: ${{ steps.keyvault-secret.outputs.SLACK_WEBHOOK }}
