name: Infrastructure Validation

on:
  schedule:
    # Run daily at 3 AM UTC (4 AM BST / 3 AM GMT)
    # Adjust the time to avoid conflicts with other scheduled jobs
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate'
        required: false
        default: 'production'
        type: choice
        options:
          - development
          - production

env:
  SERVICE_NAME: #SERVICE_NAME#
  SERVICE_SHORT: #SERVICE_SHORT#
  TERRAFORM_DIR: terraform/application

jobs:
  validate-infrastructure:
    name: Validate ${{ github.event_name == 'schedule' && 'Production' || inputs.environment }} Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Determine environment and ref
        id: config
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "terraform_ref=main" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "terraform_ref=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.config.outputs.terraform_ref }}

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        id: terraform-version
        run: |
          TERRAFORM_VERSION=$(awk '/{/{f=/^terraform/;next}f' ${{ env.TERRAFORM_DIR }}/terraform.tf | grep -o '[0-9\.]*' | head -1)
          if [ -z "$TERRAFORM_VERSION" ]; then
            echo "::error ::Failed to extract terraform_version from terraform.tf"
            exit 1
          fi
          echo "version=$TERRAFORM_VERSION" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.terraform-version.outputs.version }}
          terraform_wrapper: false

      - name: Validate infrastructure
        id: validate
        run: |
          set +e

          # Run terraform plan with detailed exit code using Makefile
          make ${{ steps.config.outputs.environment }} set-detailed-exitcode terraform-plan
          EXIT_CODE=$?

          # Handle exit codes
          # 0 = No changes
          # 1 = Error
          # 2 = Changes detected (drift)

          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ No infrastructure drift detected"
            echo "drift_detected=false" >> $GITHUB_OUTPUT
            exit 0
          elif [ $EXIT_CODE -eq 2 ]; then
            echo "⚠️ Infrastructure drift detected!"
            echo "drift_detected=true" >> $GITHUB_OUTPUT

            # Capture plan output for issue creation
            make ${{ steps.config.outputs.environment }} terraform-plan > /tmp/plan-output.txt 2>&1 || true
            PLAN_SUMMARY=$(grep -E "Plan:|No changes.|Your infrastructure matches" /tmp/plan-output.txt || echo "Changes detected in infrastructure")
            echo "plan_summary<<EOF" >> $GITHUB_OUTPUT
            echo "$PLAN_SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Error running terraform plan"
            echo "drift_detected=error" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Send Slack notification on drift
        if: steps.validate.outputs.drift_detected == 'true' && vars.ENABLE_INFRASTRUCTURE_VALIDATION_ALERTS == 'true'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "channel": "#${{ env.SERVICE_SHORT }}-alerts",
              "username": "Infrastructure Validator",
              "icon_emoji": ":warning:",
              "attachments": [
                {
                  "color": "warning",
                  "title": "Infrastructure Drift Detected - ${{ env.SERVICE_NAME }}",
                  "text": "Environment: ${{ steps.config.outputs.environment }}",
                  "fields": [
                    {
                      "title": "Summary",
                      "value": "${{ steps.validate.outputs.plan_summary }}",
                      "short": false
                    },
                    {
                      "title": "Action Required",
                      "value": "Review the terraform plan and apply changes if intended",
                      "short": false
                    },
                    {
                      "title": "Workflow Run",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                      "short": false
                    }
                  ],
                  "footer": "GitHub Actions",
                  "ts": "${{ github.run_id }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create or update drift issue
        if: steps.validate.outputs.drift_detected == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Infrastructure Drift: ${{ env.SERVICE_NAME }} - ${{ steps.config.outputs.environment }}`;
            const labels = ['infrastructure-drift', 'automation', '${{ steps.config.outputs.environment }}'];

            // Check for existing open issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: labels.join(',')
            });

            const body = `## Infrastructure Drift Detected

            **Service:** ${{ env.SERVICE_NAME }}
            **Environment:** ${{ steps.config.outputs.environment }}
            **Date:** ${new Date().toISOString()}
            **Workflow:** [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### Summary
            \`\`\`
            ${{ steps.validate.outputs.plan_summary }}
            \`\`\`

            ### Action Required
            1. Review the terraform plan output in the workflow run
            2. If changes are expected, apply them using the deployment workflow
            3. If unexpected, investigate the cause of the drift
            4. Close this issue once resolved

            ---
            *Automatically generated by scheduled infrastructure validation*`;

            if (issues.data.length > 0) {
              // Update existing issue with comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `### Drift Still Detected - ${new Date().toISOString()}

                The infrastructure drift persists. Please review and address.

                [View Latest Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });

              console.log(`Updated existing issue #${issues.data[0].number}`);
            } else {
              // Create new issue
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: labels
              });

              console.log(`Created new issue #${newIssue.data.number}`);
            }

      - name: Send Slack notification on error
        if: failure() && vars.ENABLE_INFRASTRUCTURE_VALIDATION_ALERTS == 'true'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "channel": "#${{ env.SERVICE_SHORT }}-alerts",
              "username": "Infrastructure Validator",
              "icon_emoji": ":x:",
              "attachments": [
                {
                  "color": "danger",
                  "title": "Infrastructure Validation Failed - ${{ env.SERVICE_NAME }}",
                  "text": "Environment: ${{ steps.config.outputs.environment }}",
                  "fields": [
                    {
                      "title": "Error",
                      "value": "Failed to run terraform plan validation",
                      "short": false
                    },
                    {
                      "title": "Workflow Run",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                      "short": false
                    }
                  ],
                  "footer": "GitHub Actions",
                  "ts": "${{ github.run_id }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}