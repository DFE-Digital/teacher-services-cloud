name: Validate Infrastructure
description: Run terraform plan with detailed exit code to validate infrastructure state

inputs:
  azure_credentials:
    description: Azure service principal credentials
    required: true
  environment:
    description: Environment to validate (test, platform-test, production)
    required: true
  terraform_main_ref:
    description: Git ref (branch/tag/SHA) to use for terraform code
    required: false
    default: main
  slack_webhook:
    description: Slack webhook URL for notifications (only used on failure)
    required: false
  slack_channel:
    description: Slack channel for notifications
    required: false
    default: '#infrastructure-alerts'

outputs:
  drift_detected:
    description: Whether infrastructure drift was detected
    value: ${{ steps.plan.outputs.drift_detected }}
  plan_output:
    description: The terraform plan output
    value: ${{ steps.plan.outputs.plan_output }}

runs:
  using: composite

  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.terraform_main_ref }}

    - name: Azure login
      uses: azure/login@v2
      with:
        creds: ${{ inputs.azure_credentials }}

    - name: Extract Terraform version
      id: terraform-version
      shell: bash
      run: |
        TERRAFORM_VERSION=$(awk '/{/{f=/^terraform/;next}f' cluster/terraform_aks_cluster/terraform.tf | grep -o '[0-9\.]*' | head -1)
        if [ -z "$TERRAFORM_VERSION" ]; then
          echo "::error ::Failed to extract terraform_version from terraform.tf"
          exit 1
        fi
        echo "version=$TERRAFORM_VERSION" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ steps.terraform-version.outputs.version }}
        terraform_wrapper: false

    - name: Run terraform plan with detailed exit code
      id: plan
      shell: bash
      run: |
        set +e  # Don't exit on non-zero return codes

        # Create output file for plan results
        PLAN_OUTPUT_FILE="/tmp/terraform-plan-output.txt"

        # Run terraform plan with detailed exit code
        make ${{ inputs.environment }} set-detailed-exitcode terraform-plan > "$PLAN_OUTPUT_FILE" 2>&1
        EXIT_CODE=$?

        # Capture plan output
        PLAN_OUTPUT=$(cat "$PLAN_OUTPUT_FILE")

        # Set outputs based on exit code
        # Exit codes:
        # 0 = No changes
        # 1 = Error
        # 2 = Changes detected (drift)

        if [ $EXIT_CODE -eq 0 ]; then
          echo "✅ No infrastructure drift detected"
          echo "drift_detected=false" >> $GITHUB_OUTPUT
          exit 0
        elif [ $EXIT_CODE -eq 1 ]; then
          echo "❌ Error running terraform plan"
          echo "drift_detected=error" >> $GITHUB_OUTPUT
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          exit 1
        elif [ $EXIT_CODE -eq 2 ]; then
          echo "⚠️ Infrastructure drift detected!"
          echo "drift_detected=true" >> $GITHUB_OUTPUT
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Extract change summary
          CHANGES=$(echo "$PLAN_OUTPUT" | grep -E "Plan:|No changes.|Your infrastructure matches" || echo "Changes detected")
          echo "changes_summary=$CHANGES" >> $GITHUB_OUTPUT
        else
          echo "❓ Unexpected exit code: $EXIT_CODE"
          echo "drift_detected=unknown" >> $GITHUB_OUTPUT
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Send Slack notification on drift
      if: steps.plan.outputs.drift_detected == 'true' && inputs.slack_webhook != ''
      shell: bash
      run: |
        # Prepare Slack message
        SLACK_MESSAGE=$(cat <<EOF
        {
          "channel": "${{ inputs.slack_channel }}",
          "username": "Infrastructure Validator",
          "icon_emoji": ":warning:",
          "attachments": [
            {
              "color": "warning",
              "title": "Infrastructure Drift Detected",
              "text": "Environment: ${{ inputs.environment }}",
              "fields": [
                {
                  "title": "Summary",
                  "value": "${{ steps.plan.outputs.changes_summary }}",
                  "short": false
                },
                {
                  "title": "Action Required",
                  "value": "Review the terraform plan output and apply changes if intended",
                  "short": false
                },
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Workflow Run",
                  "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                  "short": true
                }
              ],
              "footer": "GitHub Actions",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )

        # Send to Slack
        curl -X POST -H 'Content-type: application/json' \
          --data "$SLACK_MESSAGE" \
          "${{ inputs.slack_webhook }}"

    - name: Send Slack notification on error
      if: failure() && inputs.slack_webhook != ''
      shell: bash
      run: |
        # Prepare error Slack message
        SLACK_MESSAGE=$(cat <<EOF
        {
          "channel": "${{ inputs.slack_channel }}",
          "username": "Infrastructure Validator",
          "icon_emoji": ":x:",
          "attachments": [
            {
              "color": "danger",
              "title": "Infrastructure Validation Failed",
              "text": "Environment: ${{ inputs.environment }}",
              "fields": [
                {
                  "title": "Error",
                  "value": "Failed to run terraform plan validation",
                  "short": false
                },
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Workflow Run",
                  "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                  "short": true
                }
              ],
              "footer": "GitHub Actions",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )

        # Send to Slack
        curl -X POST -H 'Content-type: application/json' \
          --data "$SLACK_MESSAGE" \
          "${{ inputs.slack_webhook }}"