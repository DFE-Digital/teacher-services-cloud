name: Deploy environment
description: Deploy cluster and configure kubernetes

inputs:
  azure-client-id:
    description: Azure managed identity client ID for OIDC authentication
    required: true
  azure-subscription-id:
    description: Azure managed identity subscription ID for OIDC authentication
    required: true
  azure-tenant-id:
    description: Azure managed identity tenant ID for OIDC authentication
    required: true
  environment_name:
    description: Name of the environment in Makefile
    required: true

runs:
  using: composite

  steps:
  - name: Set environment variables
    run: |
      TERRAFORM_VERSION=$(awk '/{/{f=/^terraform/;next}f' terraform_aks_cluster/terraform.tf | grep -o [0-9\.]*)
      echo "terraform_version=$TERRAFORM_VERSION" >> $GITHUB_ENV

      case ${{ inputs.environment_name }} in
        platform-test)
          APP_DOMAIN=platform-test.teacherservices.cloud
          ;;
        test)
          APP_DOMAIN=test.teacherservices.cloud
          FRONT_DOOR_TEST=https://staging.apply-for-teacher-training.service.gov.uk/check
          DATABASE_TEST=https://staging.apply-for-teacher-training.service.gov.uk/integrations/monitoring/all
          ;;
        production)
          APP_DOMAIN=teacherservices.cloud
          FRONT_DOOR_TEST=https://www.apply-for-teacher-training.service.gov.uk/check
          DATABASE_TEST=https://www.apply-for-teacher-training.service.gov.uk/integrations/monitoring/all
          ;;
      esac
      echo "APP_DOMAIN=$APP_DOMAIN" >> $GITHUB_ENV
      echo "FRONT_DOOR_TEST=$FRONT_DOOR_TEST" >> $GITHUB_ENV
      echo "DATABASE_TEST=$DATABASE_TEST" >> $GITHUB_ENV

    shell: bash
    working-directory: cluster

  - uses: Azure/login@v2
    with:
      client-id: ${{ inputs.azure-client-id }}
      tenant-id: ${{ inputs.azure-tenant-id }}
      subscription-id: ${{ inputs.azure-subscription-id }}

  - id: deploy-arm-resources
    run: |
      make ci ${{ inputs.environment_name }} deploy-azure-resources
    shell: bash

  - uses: hashicorp/setup-terraform@v3
    with:
      terraform_version: ${{ env.terraform_version }}
      terraform_wrapper: false

  - name: Set ARM and kubelogin environment
    uses: DFE-Digital/github-actions/set-kubelogin-environment@master
    with:
      azure-client-id: ${{ inputs.azure-client-id }}
      azure-tenant-id: ${{ inputs.azure-tenant-id }}
      azure-subscription-id: ${{ inputs.azure-subscription-id }}

  - id: terraform
    run: |
      make ci ${{ inputs.environment_name }} terraform-apply
      cd cluster/terraform_aks_cluster
      TFOUTPUTS=$(terraform output --json)
      OUTPUTS=($(jq -r <<< "$TFOUTPUTS" | jq -r 'keys | @sh' | tr -d \'))
      for o in "${OUTPUTS[@]}"
      do
        echo ${o}=$(jq -r .${o}.value <<< "$TFOUTPUTS") >> $GITHUB_ENV
      done
    shell: bash

  - name: Install kubectl
    uses: DFE-Digital/github-actions/set-kubectl@master

  - name: Smoke tests
    shell: bash
    run: |
      echo Check ingress...
      curl -sS --fail "https://aaa.${APP_DOMAIN}/healthz" > /dev/null

      echo Check welcome app...
      curl -sS --fail "https://www.${APP_DOMAIN}/" > /dev/null

      if [[ -n "$FRONT_DOOR_TEST" ]]; then
        echo Check Apply app via front door...
        curl -sS --fail "$FRONT_DOOR_TEST" > /dev/null
      fi

      if [[ -n "$DATABASE_TEST" ]]; then
        echo Check Apply database via healthcheck page...
        curl -sS --fail "$DATABASE_TEST" > /dev/null
      fi

      echo Get cluster credentials...
      make ci ${{ inputs.environment_name }} get-cluster-credentials

      echo Get namespaces...
      kubectl get namespaces | grep -q infra
